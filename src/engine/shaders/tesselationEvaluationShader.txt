#version 410 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform sampler2D displacementMap;
uniform float displacementFactor;

in vec3 worldPos_ES_in[];
in vec2 texCoord_ES_in[];
in vec3 normal_ES_in[];

out vec2 texCoord_FS_in;
out vec3 worldPos_FS_in;
out vec3 normal_FS_in;


vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)
{
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)
{
   	return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;
}


void main()
{
   	// Interpolate the attributes of the output vertex using the barycentric coordinates
   	texCoord_FS_in = interpolate2D(texCoord_ES_in[0], texCoord_ES_in[1], texCoord_ES_in[2]);
   	normal_FS_in = interpolate3D(normal_ES_in[0], normal_ES_in[1], normal_ES_in[2]);
   	normal_FS_in = normalize(normal_FS_in);
   	worldPos_FS_in = interpolate3D(worldPos_ES_in[0], worldPos_ES_in[1], worldPos_ES_in[2]);
   	
   	float Displacement = texture(displacementMap, texCoord_FS_in).x;
   	worldPos_FS_in += normal_FS_in * Displacement * displacementFactor;
   	gl_Position = projectionMatrix * viewMatrix * vec4(worldPos_FS_in, 1.0);
}